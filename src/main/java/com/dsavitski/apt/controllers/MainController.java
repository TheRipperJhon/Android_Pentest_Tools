package com.dsavitski.apt.controllers;

import com.dsavitski.apt.log.TextAreaAppender;
import com.dsavitski.apt.service.AdbService;
import com.dsavitski.apt.service.ConfigService;
import com.dsavitski.apt.service.ToolsService;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.TextArea;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import static com.dsavitski.apt.constants.ConfigKeys.CURRENT_PACKAGE;

/**
 * Main window controller
 */

@Controller
public class MainController {
    private static final Logger logger = LogManager.getLogger(MainController.class);

    @Autowired
    AdbService adbService;
    @Autowired
    ToolsService toolsService;

    @FXML
    ChoiceBox<String> choicePackages;
    @FXML
    TextArea textAreaLog;
    @Autowired
    private ConfigService configService;

    @FXML
    public void initialize() {
        initLog();
        flushDatabase();

        choicePackages.getSelectionModel()
                .selectedIndexProperty()
                .addListener((observable, oldValue, newValue) -> {
                    final String selectedPackage = choicePackages.getItems().get((int) newValue);
                    configService.saveOption(CURRENT_PACKAGE, selectedPackage);
                    logger.info("Base package set to {}", selectedPackage);
                });
    }

    /**
     * Init textarea appender
     */
    private void initLog() {
        TextAreaAppender.setTextArea(textAreaLog);
        logger.info("Logger initialized");
    }

    /**
     * Init application state - flush sensitive variables in db
     */
    private void flushDatabase() {
        configService.saveOption(CURRENT_PACKAGE, null);
        logger.info("Database flushed");
    }

    @FXML
    public void pullApplicationsList() {
        logger.info("Pulling application list");
        ObservableList<String> packages = FXCollections.observableArrayList(adbService.pullPacketsList());
        choicePackages.setItems(packages);
        choicePackages.getSelectionModel().selectFirst();
    }


    @FXML
    public void launchAdbShell() {
        logger.info("Starting adb shell");
        adbService.launchAdbShell();
    }

    @FXML
    public void checkFilePermissions() {
        if (!configService.isPackageSelected(true)) {
            logger.warn("Application package is not set");
            return;
        }

        adbService.checkFilePermissions();
    }

    @FXML
    public void pullPackageFiles() {
        if (!configService.isPackageSelected(true)) {
            logger.warn("Application package is not set");
            return;
        }

        adbService.pullPackageFiles();
    }

    @FXML
    public void showLogs() {
        adbService.showLogs();
    }

    @FXML
    public void pullApk() {
        if (!configService.isPackageSelected(true)) {
            logger.warn("Application package is not set");
            return;
        }
        adbService.pullApk();
    }

    @FXML
    public void showInClassyShark() {
        if (!adbService.isApkPulled()) {
            logger.warn("Pull apk first!");
            return;
        }
        toolsService.showInClassyShark();
    }

    @FXML
    public void trustAllCertsRepack() {
        if (!adbService.isApkPulled()) {
            logger.warn("Pull apk first!");
            return;
        }
        toolsService.trustAllCertsRepack();
    }

    @FXML
    public void unpackWithApkTool() {
        if (!adbService.isApkPulled()) {
            logger.warn("Pull apk first!");
            return;
        }
        toolsService.unpackWithApkTool();
    }

    @FXML
    public void checkLibs() {
        toolsService.checkLibs();
    }

    @FXML
    public void launchMobSf() {
        toolsService.launchMobSf();
    }

    @FXML
    public void openSessionDir() {
        toolsService.openSessionDir();
    }

    @FXML
    public void dumpLogsToFile() {
        adbService.dumpLogsToFile();
    }

    @FXML
    public void restartAdbAsRoot() {
        adbService.restartAdbAsRoot();
    }
}
