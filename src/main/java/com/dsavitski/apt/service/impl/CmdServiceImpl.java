package com.dsavitski.apt.service.impl;

import com.dsavitski.apt.service.CmdService;
import com.dsavitski.apt.service.ConfigService;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.stream.Collectors;

import static com.dsavitski.apt.constants.ConfigKeys.APT_PATH;

@Service
public class CmdServiceImpl implements CmdService {
    private static final Logger logger = LogManager.getLogger(CmdServiceImpl.class);

    @Autowired
    private ConfigService configService;

    private String aptPath;

    @PostConstruct
    private void init() {
        aptPath = configService.getByKey(APT_PATH);
    }

    @Override
    public String executeScript(String script, String... args) {
        return executeCommand(aptPath + script, args);
    }

    @Override
    public String executeCommand(String script, String... args) {

        String[] cmd = {script};
        cmd = ArrayUtils.addAll(cmd, args);

        String standard = "";
        String error = "";
        try {
            Process process = Runtime.getRuntime().exec(cmd);
            process.waitFor();
            standard = new BufferedReader(new InputStreamReader(process.getInputStream()))
                    .lines().collect(Collectors.joining("\n"));
            error = new BufferedReader(new InputStreamReader(process.getInputStream()))
                    .lines().collect(Collectors.joining("\n"));
        } catch (IOException | InterruptedException e) {
            logger.error("Error executing command " + Arrays.toString(cmd) + " " + Arrays.toString(args), e);
            e.printStackTrace();
        }

        logOutput(standard, error);
        return standard;
    }

    private void logOutput(final String output, final String error) {
        if (output.length() > 0) {
            logger.info(output);
        }
        if (error.length() > 0) {
            logger.error(error);
        }
    }
}
